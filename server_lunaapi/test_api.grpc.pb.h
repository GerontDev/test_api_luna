// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test_api.proto
// Original file comments:
// See README.txt for information and build instructions.
// 
// Note: START and END tags are used in comments to define sections used in
// tutorials.  They are not part of the syntax for Protocol Buffers.
// 
// To get an in-depth walkthrough of this file and the related examples, see:
// https://developers.google.com/protocol-buffers/docs/tutorials
//
// [START declaration]
#ifndef GRPC_test_5fapi_2eproto__INCLUDED
#define GRPC_test_5fapi_2eproto__INCLUDED

#include "test_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace LunaSDK {

class LunaSDKServer final {
 public:
  static constexpr char const* service_full_name() {
    return "LunaSDK.LunaSDKServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Proccesing(::grpc::ClientContext* context, const ::LunaSDK::Image& request, ::LunaSDK::ImageProccessingResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LunaSDK::ImageProccessingResult>> AsyncProccesing(::grpc::ClientContext* context, const ::LunaSDK::Image& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LunaSDK::ImageProccessingResult>>(AsyncProccesingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LunaSDK::ImageProccessingResult>> PrepareAsyncProccesing(::grpc::ClientContext* context, const ::LunaSDK::Image& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LunaSDK::ImageProccessingResult>>(PrepareAsyncProccesingRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Proccesing(::grpc::ClientContext* context, const ::LunaSDK::Image* request, ::LunaSDK::ImageProccessingResult* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LunaSDK::ImageProccessingResult>* AsyncProccesingRaw(::grpc::ClientContext* context, const ::LunaSDK::Image& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LunaSDK::ImageProccessingResult>* PrepareAsyncProccesingRaw(::grpc::ClientContext* context, const ::LunaSDK::Image& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Proccesing(::grpc::ClientContext* context, const ::LunaSDK::Image& request, ::LunaSDK::ImageProccessingResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LunaSDK::ImageProccessingResult>> AsyncProccesing(::grpc::ClientContext* context, const ::LunaSDK::Image& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LunaSDK::ImageProccessingResult>>(AsyncProccesingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LunaSDK::ImageProccessingResult>> PrepareAsyncProccesing(::grpc::ClientContext* context, const ::LunaSDK::Image& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LunaSDK::ImageProccessingResult>>(PrepareAsyncProccesingRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Proccesing(::grpc::ClientContext* context, const ::LunaSDK::Image* request, ::LunaSDK::ImageProccessingResult* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::LunaSDK::ImageProccessingResult>* AsyncProccesingRaw(::grpc::ClientContext* context, const ::LunaSDK::Image& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LunaSDK::ImageProccessingResult>* PrepareAsyncProccesingRaw(::grpc::ClientContext* context, const ::LunaSDK::Image& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Proccesing_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Proccesing(::grpc::ServerContext* context, const ::LunaSDK::Image* request, ::LunaSDK::ImageProccessingResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Proccesing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Proccesing() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Proccesing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proccesing(::grpc::ServerContext* context, const ::LunaSDK::Image* request, ::LunaSDK::ImageProccessingResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProccesing(::grpc::ServerContext* context, ::LunaSDK::Image* request, ::grpc::ServerAsyncResponseWriter< ::LunaSDK::ImageProccessingResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Proccesing<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Proccesing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Proccesing() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Proccesing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proccesing(::grpc::ServerContext* context, const ::LunaSDK::Image* request, ::LunaSDK::ImageProccessingResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Proccesing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Proccesing() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Proccesing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proccesing(::grpc::ServerContext* context, const ::LunaSDK::Image* request, ::LunaSDK::ImageProccessingResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProccesing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Proccesing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Proccesing() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::LunaSDK::Image, ::LunaSDK::ImageProccessingResult>(std::bind(&WithStreamedUnaryMethod_Proccesing<BaseClass>::StreamedProccesing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Proccesing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Proccesing(::grpc::ServerContext* context, const ::LunaSDK::Image* request, ::LunaSDK::ImageProccessingResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProccesing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::LunaSDK::Image,::LunaSDK::ImageProccessingResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Proccesing<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Proccesing<Service > StreamedService;
};

}  // namespace LunaSDK


#endif  // GRPC_test_5fapi_2eproto__INCLUDED
